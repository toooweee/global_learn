generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  CLIENT_ADMIN

  @@map("roles")
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  password   String
  role       Role         @default(USER)
  token      Token[]
  profile    UserProfile?
  company    Company?     @relation(fields: [companyId], references: [id])
  companyId  String?      @map("company_id")
  position   Position?    @relation(fields: [positionId], references: [id])
  positionId String?      @map("position_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model UserProfile {
  id             String   @id @default(uuid())
  name           String
  surname        String
  bio            String?
  employmentDate DateTime @map("employment_date")
  avatars        File[]
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users_profiles")
}

model Token {
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@unique([userId, userAgent])
  @@map("tokens")
}

model RegisterRequest {
  id      String                @id @default(uuid())
  email   String                @unique
  phone   String
  status  RegisterRequestStatus @default(PENDING)
  company Company?
  token   RegisterRequestToken?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("register_requests")
}

model RegisterRequestToken {
  token             String          @unique
  expiresAt         DateTime        @map("expires_at")
  RegisterRequest   RegisterRequest @relation(fields: [registerRequestId], references: [id])
  registerRequestId String          @unique @map("register_request_id")

  @@map("register_requst_tokens")
}

enum RegisterRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("register_request_statuses")
}

model Company {
  id                 String                @id @default(uuid())
  name               String
  description        String
  directions         CompaniesDirections[]
  logo               File?
  address            String
  foundationDate     DateTime              @map("foundation_date")
  departments        Department[]
  users              User[]
  status             CompanyStatus         @default(TRIAL)
  registerRequest    RegisterRequest       @relation(fields: [registerRequestId], references: [id])
  registerRequestId  String                @unique @map("register_request_id")
  companyLegalForm   CompanyLegalForm      @relation(fields: [companyLegalFormId], references: [id])
  companyLegalFormId String @map("company_legal_form_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("companies")
}

model CompanyLegalForm {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  companies Company[]

  @@map("company_legal_forms")
}

enum CompanyStatus {
  TRIAL
  ACTIVE

  @@map("company_status")
}

model CompaniesDirections {
  id          String    @id @default(uuid())
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String    @map("company_id")
  direction   Direction @relation(fields: [directionId], references: [id], onDelete: Cascade)
  directionId String    @map("direction_id")

  @@map("companies_directions")
}

model Direction {
  id        String                @id @default(uuid())
  name      String                @unique
  companies CompaniesDirections[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("directions")
}

model Department {
  id        String     @id @default(uuid())
  name      String
  positions Position[]
  company   Company    @relation(fields: [companyId], references: [id])
  companyId String     @map("company_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("departments")
}

model Position {
  id           String     @id @default(uuid())
  name         String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @map("department_id")
  user         User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("positions")
}

model File {
  id       String @id @default(uuid())
  filename String
  path     String
  mimetype String
  size     Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId String?      @map("user_profile_id")
  company       Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String?      @unique @map("company_id")

  @@map("files")
}
